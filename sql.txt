create Table{
    CREATE TABLE category(
        id int AUTO_INCREMENT,
        name VARCHAR(50),
        PRIMARY KEY (id)
    );
    CREATE TABLE product(
        id INT AUTO_INCREMENT,
        categoryID INT,
        name VARCHAR(255),
        PRIMARY KEY (id)
    );
    CREATE TABLE productOrder(
        id INT AUTO_INCREMENT,
        productID INT,
        orderID INT,
        quantity INT,
        price DECIMAL(10,2),
        inStock int,
        PRIMARY KEY (id)
    );
    CREATE TABLE cartOrder(
        id INT AUTO_INCREMENT,
        productOrderID INT,
        cartID INT,
        PRIMARY KEY (id)
    );
    CREATE TABLE cart(
        id INT AUTO_INCREMENT,
        userID INT,
        PRIMARY KEY (id)
    );
    CREATE TABLE users(
        id INT AUTO_INCREMENT,
        name VARCHAR(50),
        login VARCHAR(255),
        password VARCHAR(255),
        email VARCHAR(255),
        PRIMARY KEY (id)
    );
    CREATE TABLE orders(
        id INT AUTO_INCREMENT,
        cartOrderID INT,
        status VARCHAR(255),
        dataOrder DATE DEFAULT NOW(),
        PRIMARY KEY (id)
    );
}

inner join{
    SELECT product.id, category.name, product.name
    FROM product
    INNER JOIN category ON product.categoryID = category.id

    SELECT user.id, user.name, orders.status, orders.dataOrder
    FROM user
    INNER JOIN orders ON user.id = orders.userID

    SELECT user.name, orders.status, product_order.quantity, product_order.price
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID

    SELECT orders.status, product_order.quantity, product.name
    FROM orders
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id

    SELECT user.name, orders.status, product_order.price, product.name
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id

    SELECT orders.status, orders.dataOrder, product_order.quantity, product_order.price, product.name, category.name
    FROM orders
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id
    INNER JOIN category ON product.categoryID = category.id

    SELECT user.name, orders.status, product_order.quantity, product.name, category.name
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id
    INNER JOIN category ON product.categoryID = category.id

    SELECT user.name, user.login, orders.status, orders.dataOrder, product_order.quantity, product_order.price, product.name, category.name
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id
    INNER JOIN category ON product.categoryID = category.id

    SELECT category.name, product.name, product_order.quantity, product_order.price, orders.status, orders.dataOrder
    FROM category
    INNER JOIN product ON category.id = product.categoryID
    INNER JOIN product_order ON product.id = product_order.productID
    INNER JOIN orders ON product_order.orderID = orders.id

    SELECT user.name, user.login, user.password, orders.status, orders.dataOrder, product_order.quantity, product_order.price, product.name, category.name
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    INNER JOIN product ON product_order.productID = product.id
    INNER JOIN category ON product.categoryID = category.id

}

kolejne joiny{
    SELECT *
    FROM product_order po
    LEFT JOIN product p ON po.productID = p.id

    SELECT *
    FROM user
    LEFT JOIN orders ON user.id = orders.userID
    WHERE orders.userID IS NULL

    SELECT orders.status AS "status", orders.dataOrder AS "order date", user.name AS "user name", product_order.price
    FROM orders
    LEFT JOIN user ON orders.userID = user.id
    LEFT JOIN product_order ON orders.id = product_order.orderID

    SELECT * 
    FROM product p 
    LEFT JOIN category c ON p.categoryID = c.id
    WHERE c.id IS NULL

    SELECT product_order.id, product_order.price, orders.status, product.name
    FROM product_order
    LEFT JOIN product ON product_order.productID = product.id
    RIGHT JOIN orders ON product_order.orderID = orders.id

    SELECT *
    FROM product_order
    RIGHT JOIN product ON product_order.productID = product.id
    LEFT JOIN orders ON product_order.orderID = orders.id

    SELECT * 
    FROM product_order
    LEFT JOIN orders ON product_order.orderID = orders.id
    RIGHT JOIN user ON orders.userID = user.id

    SELECT * 
    FROM orders
    RIGHT JOIN user ON orders.userID = user.id

    SELECT *
    FROM category
    RIGHT JOIN product ON category.id = product.categoryID
    LEFT JOIN product_order ON product.id = product_order.productID

    SELECT user.name, user.login, orders.status, orders.dataOrder, product_order.quantity
    FROM user
    LEFT JOIN orders ON user.id = orders.userID
    RIGHT JOIN product_order ON orders.id = product_order.orderID
}

raporty{
    SELECT u.name, SUM(po.price * po.quantity) AS "sum price"
    FROM orders o
    INNER JOIN user u ON o.userID = u.id
    INNER JOIN product_order po ON o.id = po.orderID
    GROUP BY u.name

    SELECT user.name, MONTH(product_order.createDate) AS "month", SUM(product_order.price * product_order.quantity) AS "sum price"
    FROM user 
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY MONTH(product_order.createDate) ASC

    SELECT category.name, SUM(product_order.quantity) AS "quantity"
    FROM product_order
    INNER JOIN product ON product_order.productID = product.id
    INNER JOIN category ON product.categoryID = category.id
    GROUP BY category.name

    SELECT orders.status, SUM(product_order.price) AS "price sum", product_order.createDate
    FROM orders
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY orders.status

    SELECT user.name, SUM(product_order.quantity) AS "quantity > 5"
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY user.name
    HAVING SUM(product_order.quantity) > 5

    SELECT user.name, SUM(product_order.quantity * product_order.price) AS "spend money > 800"
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY user.name
    HAVING SUM(product_order.quantity * product_order.price) > 800

    SELECT product.name, SUM(product_order.quantity)
    FROM product
    INNER JOIN product_order ON product.id = product_order.productID
    GROUP BY product.name

    SELECT user.name, IF(SUM(product_order.quantity * product_order.price)>800, "spend a lot", "spend not much") AS "spend money", SUM(product_order.quantity * product_order.price) AS "price"
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY user.name

}

sql inny{
    1
    SELECT user.name, user.login, orders.status, orders.dataOrder
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    WHERE DAYOFWEEK(orders.dataOrder) = 3

    2
    SELECT user.name, SUM(product_order.quantity * product_order.price)
    FROM user
    INNER JOIN orders ON user.id = orders.userID
    INNER JOIN product_order ON orders.id = product_order.orderID
    GROUP BY user.name
    HAVING (SELECT AVG(product_order.quantity * product_order.price) FROM product_order) < SUM(product_order.quantity * product_order.price)

    3
    SELECT product.name AS "Product name", MAX(product.price), category.name AS "category name"
    FROM product
    INNER JOIN category ON product.categoryID = category.id
    GROUP BY category.name

    4
    
}