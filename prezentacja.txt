SOLID{
	S -> Samodzielny (Single responsibility Principle)

	Metoda powinna mieć wyłącznie jeden powód do zmiany.
	Dana klasa powinna mieć tylko jeden główny cel. Jedną funkcjonalność.

	skrpt{
		złe {
			public class Contract {

			    private final Date start;

			    private final Date end;

			    public Contract(Date start, Date end) {
			        this.start = start;
			        this.end = end;
			    }

			    public BigDecimal getMonthlySubscriptionFee() {
			        // compute based on end and start
			        return BigDecimal.ONE;
			    }

			    public byte[] formatAsPDF() {
			        return "...".getBytes();
			    }
			}
		}
		dobrze{
			public class Contract {

			    private final Date start;

			    private final Date end;

			    public Contract(Date start, Date end) {
			        this.start = start;
			        this.end = end;
			    }

			    public Date getStart() {
			        return start;
			    }

			    public Date getEnd() {
			        return end;
			    }

			    public BigDecimal getMonthlySubscriptionFee() {
			        // compute based on end and start
			        return BigDecimal.ONE;
			    }
			}

			public class PDFFormatter {

			    private final Contract contract;

			    public PDFFormatter(Contract contract) {
			        this.contract = contract;
			    }

			    public byte[] format() {
			        return "...".getBytes();
			    }
			}
		}
	}

	O -> Otwarty

	Żeby kod był możliwy do rozszerzenia i zmaknięty na modyfikacje.
	Modyfikacja jest zabroniona, ponieważ zmiana deklaracji jakiejkolwiek metody może spowodować awarię systemu.

	L -> Liskov Substitution

	Kod powinien współpracować poprawnie z klasą, jak i wszystkimi jej podklasami.
	Wszystkie implementacje interfejsu powinny poprawnie działać z naszą klasą/metodą.
	np: Metoda bez wiedzy z jakim podtypem ma do czynienie wykona dokładnie to samo.

	I -> Interfejsy (Interface Segregation)

	Rozdzielać interfejsy klasy.
	Chodzi tu o to aby inny fragment kodu, który używa twojej klasy używał wyłącznie podzbioru metod, któy jest w tamtym przypadku istotny.

	D -> oDwrócenie zależności (Dependency inversion)

	Wysokopoziomowe klasy nie powinny zależeć od niskopoziomowych detali.
}

MAVEN{
	
	Ułatwienia
	-dodawanie do projektu zlaeżnoś do danej bilioteki bądź frameworku
	-kompilowanie i budowanie projektu
	-przeprowadzanie testów jednostkowych i integrayjnych
	-generowanie raportów z testów oraz stron informacyjnych o projekcie

	Maven stosuje zasadę konwencja ponad konfiguracją. Dzięki temu większość domyślnych ustawień jest wystarczających i nie trzeba się nimi przejmować.

	Maven automatycznie pobiera zależności i pobiera je z oficjalnego repozytorium. ostają umieszczone w lokalnym katalogu. 

	Pros 

	-Dodaje wszystkie zależności automatycznie poprzez czytanie pliku pom.
	-Dodawanie zależności jest bardzo proste.
	-Bardzo łatwo zacząć projekt w innych środowiskach.


	Cons
	-Maven potrzebuje być zainstalowany w systemie i też trzeba dodać plugin do ide.
	-Maven potrzebuje połączenia z internetem.
}

ACID{
	A -> Niepodzielność (Atomicity)

	Przykład{
		OPERACJA 1 ————————-> SUKCES (np. INSERT)

		OPERACJA 2 ————————-> SUKCES (np. DELETE)

		OPERACJA 3 ————————-> PORAŻKA (np. INSERT - do archiwum)

		OPERACJA 4 ————————-> SUKCES (np. UPDATE na danych dodanych do archiwum)
	}

	Zapewnienie że operacja lub zestaw operacji zostanie wykonana w całości lub anulowana.
	Transakcja zostanie anulowana a wykonane zmiany zostaną cofnięte.

	C -> Spójność (Consistency)

	Po wykonaniu transakcji system będzie spójny czyli nie zostaną naruszone zasady integralności.

	I -> Izolacja (isolation)

	Ozanacza to że dwie transakcje wykonują się współbieżnie czyli nei widzą wprowadzanych przez siebie zmian.

	Przykłady izolacji{
		    read uncommitted – jedna transakcja może odczytywać wiersze, na których działają inne transakcje (najniższy poziom izolacji)
		    read committed – transakcja może odczytywać tylko wiersze zapisane
		    repeatable read – transakcja nie może czytać ani zapisywać na wierszach odczytywanych lub zapisywanych w innej transakcji
		    serializable (szeregowalne) – wyniki współbieżnie realizowanych zapytań muszą być identyczne z wynikami tych samych zapytań realizowanych szeregowo (pełna izolacja).
	}

	D -> Trwałość (durability)

	Oznacza to że system potrafi się uruchomiś i udostępnić spójne, nienaruszone dane np po awarii zasilania.
}  

SQL ROLLUP{
	ROLLUP to rozszerzenie do GROUP BY. ROLLUP pozwala na dodanie kolejnej kolumny która reprezentuje sumy. Przy użyciu ROLLUP możesz generować wiele grup.

	ROLLUP(c1,c2) wygeneruje nam takie grupy (c1,c2), (c1), ()

	mySQL syntax{
		SELECT 
		    c1, c2, aggregate_function(c3)
		FROM
		    table_name
		GROUP BY c1, c2 WITH ROLLUP;
	}
}

SPRING{
	Jego głównym założeniem jest dostarczenie programiście mechanizmów, które sprawią, że tworzenie aplikacji będzie:

    sprawniejsze, przy jednoczesnym zachowaniu najlepszych praktyk programistycznych;
    zachowywało pewne standardy, przez które łatwiej utrzymać kod w uporządkowany sposób.

    Po sukcesie springa storzono spring boot, które zostało określone jako "framework do frameworka"

    spring udostępnia wiele kontenerów wstykiwania zależności

    spring data
    	projekt upraszczający dostęp do baz danych. zmniejszenie ilości powtarzającego się kodu.

    spring mvc 
    	najpopularniejszy framework wykorzystywany do tworzenia aplikacji webowych w javie 
    	. projekt wykorzystywany jest do tworzenia aplikacji z widokiem generownym po stronie serwera jak i do wystawiania restowych endpointów.

    spring security
    	projekt który pozawala na stworzenie systemu uwierzytelniania i autoryzacji.

    spring boot
    	ułatwia konfigurację springa.

    cechy springa
    	łatwo się go nauczyć
    	elazstyczny i wszechstronny
    	jest lekki (podstawowa wersja około 2mb)
    	łatwo go przetestwoać i wdrożyć

}